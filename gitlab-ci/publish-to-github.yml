stages:
  - test
  - publish

include:
  - project: 'fai/shared-ci'
    file: .gitlab-ci-template-vault_get_secrets.yml
  - template: Jobs/SAST.latest.gitlab-ci.yml
  - template: Jobs/Secret-Detection.latest.gitlab-ci.yml

.sast-analyzer:
  allow_failure: false

secret_detection:
  allow_failure: false
  rules:
    - if: $CI_PIPELINE_SOURCE == "parent_pipeline"
      when: always

sonarqube:
  stage: test
  image: 
    name: registry.gitlab.fai.rezel.net/fai/docker-images/sonar-scanner-cli:latest
    entrypoint: [""]
  id_tokens:
    VAULT_ID_TOKEN:
      aud: $VAULT_SERVER_URL
  variables:
    SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"  # Defines the location of the analysis task cache
    GIT_DEPTH: "0"  # Tells git to fetch all the branches of the project, required by the analysis task
    SONAR_HOST_URL: https://sonarqube.core.rezel.net
    VAULT_SERVER_URL: https://vault.fai.rezel.net
    VAULT_SECRETS_ROLE: service_hermes
    VAULT_SECRETS_PATH: kv/data/hermes_ci_secrets
  cache:
    policy: pull-push
    key: "sonar-cache-$CI_COMMIT_REF_SLUG"
    paths:
      - "${SONAR_USER_HOME}/cache"
      - sonar-scanner/
  before_script:
    - !reference [.vault_service_secrets, before_script] # Retrieve SONAR_TOKEN
  script: 
    - sonar-scanner -Dsonar.host.url="${SONAR_HOST_URL}"
  rules:
    - if: $CI_COMMIT_BRANCH != $CI_DEFAULT_BRANCH
      when: never
    - when: always

publish-to-github:
  stage: publish
  image: 
    name: alpine/git
    entrypoint: [""]
  id_tokens:
    VAULT_ID_TOKEN:
      aud: $VAULT_SERVER_URL
  variables:
    VAULT_SERVER_URL: https://vault.fai.rezel.net
    VAULT_SECRETS_ROLE: service_hermes
    VAULT_SECRETS_PATH: kv/data/hermes_ci_secrets
  before_script:
    - (apk add curl jq openssh-client)
    - !reference [.vault_service_secrets, before_script] # Retrieve GITHUB_TOKEN
    - mkdir -p ~/.ssh
    - echo "$GITHUB_DEPLOY_KEY_BASE64" | base64 -d > ~/.ssh/id_ed25519
    - chmod 600 ~/.ssh/id_ed25519
    - eval $(ssh-agent -s)
    - ssh-add ~/.ssh/id_ed25519
    - ssh-keyscan github.com >> ~/.ssh/known_hosts
  script:
    - git remote remove github || true
    - git remote add github git@github.com:Association-Rezel/herm3s.git
    - git checkout $CI_DEFAULT_BRANCH
    - git reset --hard origin/main # In case of diverged branches (e.g. after a force push)
    - git push --force github $CI_DEFAULT_BRANCH
  rules:
    - if: $CI_COMMIT_BRANCH != $CI_DEFAULT_BRANCH
      when: never
    - when: on_success