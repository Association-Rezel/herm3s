stages:
  - pre_checks
  - build
  - deploy
  - security-checks
  - publish

include:
  - project: 'rezel/shared-ci'
    file: .gitlab-ci-template-publish_to_github.yml
    inputs:
      vault_secrets_role: service_hermes
      vault_secrets_path: kv/data/hermes_ci_secrets
      github_git_remote: git@github.com:Association-Rezel/herm3s.git

variables:
  IMAGE_TAG: $CI_REGISTRY_IMAGE/herm3s:${DEPLOY_ENV}-$CI_COMMIT_SHORT_SHA
  IMAGE_TAG_LATEST: $CI_REGISTRY_IMAGE/herm3s:${DEPLOY_ENV}-latest

linting:
  rules:
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
  stage: pre_checks
  image: registry.gitlab.com/pipeline-components/black:latest
  script:
    - black --version
    - black --check --verbose --diff --color -- .

unit-tests:
  stage: pre_checks
  image: docker:24.0.7
  services:
    - docker:24.0.7-dind
  script:
    - docker compose -f tests/docker-compose.unit_tests.yaml up --build --exit-code-from unit_tests
  rules:
    - if: $SKIP_UNIT_TESTS == "true"
      when: never
    - when: never
  tags:
    - dind

build:
  stage: build
  image:
    name: gcr.io/kaniko-project/executor:debug
    entrypoint: [""]
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
      variables:
        DEPLOY_ENV: "prod"
    - variables:
        DEPLOY_ENV: "dev"
  script:
    - /kaniko/executor
      --context "${CI_PROJECT_DIR}"
      --dockerfile "${CI_PROJECT_DIR}/Dockerfile"
      --destination "${IMAGE_TAG}"
      --destination "${IMAGE_TAG_LATEST}"

deploy:
  stage: deploy
  rules: 
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
      variables:
        DEPLOY_ENV: "prod"
        DEPLOY_NAMESPACE: "default"
    - variables:
        DEPLOY_ENV: "dev"
        DEPLOY_NAMESPACE: "dev"
        RELOAD_ARG: "--reload"
  image:
    name: dtzar/helm-kubectl
    entrypoint: ['']
  before_script:
    - apk add envsubst
  script:
    - mkdir k8s-envsubst
    - |
      for file in k8s/*.yaml; do
        envsubst < $file | tee k8s-envsubst/$(basename $file)
      done
    - kubectl config use-context rezel/k8s-cluster:main-k8s-agent
    - kubectl apply -f k8s-envsubst/
